/*const qrCodeRegionId = "reader";
const sheetURL = "https://script.google.com/macros/s/AKfycbw8xszr4akNMt3Jx_PkjQQS-skTugL_SvqCtCvBfjXNuhTuddA5_R4E2uxot1p-VZGRiw/exec";
const beepSound = document.getElementById("beep");
const readerEl = document.getElementById("reader");


let lastScannedText = "";
let lastScannedTime = 0;
const dedupCooldown = 2500; // 5 gi√¢y: kh√¥ng qu√©t l·∫°i c√πng m√£

let html5QrCode;
let isCooldown = false;        // ‚è± D·ª´ng 1s gi·ªØa c√°c l·∫ßn qu√©t
let queue = [];
let isSending = false;

function onScanSuccess(decodedText) {

  const now = Date.now();

  // ‚ùå B·ªè qua n·∫øu m√£ tr√πng trong th·ªùi gian g·∫ßn ƒë√¢y
  if (decodedText === lastScannedText && (now - lastScannedTime < dedupCooldown)) {
    console.log("‚õî Tr√πng m√£, b·ªè qua:", decodedText);
    return;
  }

  // ‚úÖ C·∫≠p nh·∫≠t m√£ g·∫ßn nh·∫•t
  lastScannedText = decodedText;
  lastScannedTime = now;

  if (isCooldown) return;

  isCooldown = true; // ‚õî T·∫°m d·ª´ng qu√©t ti·∫øp
  setTimeout(() => {
    isCooldown = false; // ‚úÖ Sau 1s m·ªõi qu√©t l·∫°i ƒë∆∞·ª£c
  }, 1000);



  // üîä B√≠p + vi·ªÅn
  beepSound.play();
  readerEl.classList.add("qr-highlight");
  setTimeout(() => readerEl.classList.remove("qr-highlight"), 800);

  // üìå Hi·ªÉn th·ªã n·ªôi dung
  document.getElementById("qrText").innerText = decodedText;
  document.getElementById("status").innerText = "üì§ ƒêang g·ª≠i d·ªØ li·ªáu...";

  // üß† ƒê∆∞a v√†o h√†ng ƒë·ª£i
  queue.push(decodedText);
  saveQueue();
  processQueue();
}

function saveQueue() {
  localStorage.setItem("qrQueue", JSON.stringify(queue));
}

function processQueue() {
  if (isSending || queue.length === 0) return;

  isSending = true;
  const data = queue[0];

  fetch(sheetURL, {
    method: "POST",
    body: new URLSearchParams({ data: data })
  })
    .then((res) => res.text())
    .then((result) => {
      document.getElementById("status").innerText = "‚úÖ ƒê√£ g·ª≠i: " + data;
      queue.shift();
      saveQueue();
      isSending = false;
      processQueue(); // Ti·∫øp t·ª•c g·ª≠i n·∫øu c√≤n
    })
    .catch((err) => {
      console.error("‚ùå L·ªói g·ª≠i:", err);
      document.getElementById("status").innerText = "‚ùå G·ª≠i l·ªói, s·∫Ω th·ª≠ l·∫°i...";
      isSending = false;
      setTimeout(processQueue, 2000); // Th·ª≠ l·∫°i sau 2s
    });
}

function startScanner() {
  document.getElementById("reader").style.display = "block";
  document.getElementById("startBtn").style.display = "none";
  document.getElementById("stopBtn").style.display = "inline-block";

  html5QrCode = new Html5Qrcode(qrCodeRegionId);
  html5QrCode.start(
    { facingMode: "environment" },
    {
      fps: 20,
      qrbox: function (viewfinderWidth, viewfinderHeight) {
        const minEdge = Math.min(viewfinderWidth, viewfinderHeight);
        const size = minEdge * 0.75;
        return { width: size, height: size };
      }
    },
    onScanSuccess
  );
}

function stopScanner() {
  html5QrCode.stop().then(() => {
    document.getElementById("reader").style.display = "none";
    document.getElementById("startBtn").style.display = "inline-block";
    document.getElementById("stopBtn").style.display = "none";
  }).catch(err => {
    console.error("L·ªói khi d·ª´ng camera:", err);
  });
}

// üîÑ T·∫£i l·∫°i h√†ng ƒë·ª£i n·∫øu c√≥
window.addEventListener("load", () => {
  try {
    const saved = JSON.parse(localStorage.getItem("qrQueue") || "[]");
    if (saved.length > 0) {
      queue.push(...saved);
      processQueue();
    }
  } catch (e) {
    console.warn("Kh√¥ng th·ªÉ load queue:", e);
  }
});





//-------------- h√†m v·ªã tr√≠ ch·ªØ g√µ -------------------
// M·∫£ng ch·ª©a c√°c t·ª´ s·∫Ω hi·ªÉn th·ªã lu√¢n phi√™n
const texts = ["STU","Tr∆∞·ªùng ƒê·∫°i H·ªçc C√¥ng Ngh·ªá S√†i G√≤n"];

let textIndex = 0; // V·ªã tr√≠ c·ªßa t·ª´ hi·ªán t·∫°i trong m·∫£ng texts
let charIndex = 0; // V·ªã tr√≠ k√Ω t·ª± hi·ªán t·∫°i trong t·ª´
let isDeleting = false; // Bi·∫øn ki·ªÉm tra tr·∫°ng th√°i x√≥a ch·ªØ (true: ƒëang x√≥a, false: ƒëang g√µ)

// H√†m hi·ªáu ·ª©ng g√µ ch·ªØ
function typeEffect() {
    const typingElement = document.getElementById("typing"); // L·∫•y ph·∫ßn t·ª≠ c√≥ ID "typing"
    const currentText = texts[textIndex]; // L·∫•y t·ª´ hi·ªán t·∫°i trong m·∫£ng texts

    if (isDeleting) {
        charIndex--; // N·∫øu ƒëang x√≥a, gi·∫£m s·ªë k√Ω t·ª± hi·ªÉn th·ªã
    } else {
        charIndex++; // N·∫øu ƒëang g√µ, tƒÉng s·ªë k√Ω t·ª± hi·ªÉn th·ªã
    }

    // Hi·ªÉn th·ªã m·ªôt ph·∫ßn c·ªßa ch·ªØ theo charIndex
    typingElement.innerHTML = currentText.substring(0, charIndex);

    // Ki·ªÉm tra n·∫øu ƒë√£ g√µ xong to√†n b·ªô ch·ªØ
    if (!isDeleting && charIndex === currentText.length) {
        isDeleting = true; // B·∫Øt ƒë·∫ßu chuy·ªÉn sang tr·∫°ng th√°i x√≥a ch·ªØ
        setTimeout(typeEffect, 1500); // Gi·ªØ ch·ªØ trong 1.5 gi√¢y tr∆∞·ªõc khi x√≥a
        return; // D·ª´ng h√†m t·∫°m th·ªùi
    }
    
    // Ki·ªÉm tra n·∫øu ƒë√£ x√≥a h·∫øt ch·ªØ
    else if (isDeleting && charIndex === 0) {
        isDeleting = false; // Quay l·∫°i tr·∫°ng th√°i g√µ ch·ªØ
        textIndex = (textIndex + 1) % texts.length; // Chuy·ªÉn sang t·ª´ ti·∫øp theo
    }

    // ƒêi·ªÅu ch·ªânh t·ªëc ƒë·ªô g√µ/x√≥a ch·ªØ
    let speed = isDeleting ? 50 : 100; // Khi x√≥a nhanh h∆°n khi g√µ
    setTimeout(typeEffect, speed); // G·ªçi l·∫°i h√†m sau kho·∫£ng th·ªùi gian t∆∞∆°ng ·ª©ng
}

// G·ªçi h√†m ƒë·ªÉ b·∫Øt ƒë·∫ßu hi·ªáu ·ª©ng
typeEffect();



document.addEventListener("DOMContentLoaded", function () {
    const timelineItems = document.querySelectorAll(".timeline-item");

    const observer = new IntersectionObserver(entries => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.classList.add("show");
            }
        });
    }, { threshold: 0.5 });

    timelineItems.forEach(item => observer.observe(item));
});
*/



const qrCodeRegionId = "reader";
const sheetURL = "https://script.google.com/macros/s/AKfycby94v09vkaLzDIQ0S480qidy90pBjGWJ2oTWkMUzdDD7ke1AdODCcJxypiyerB2wkV_AQ/exec";
const beepSound = document.getElementById("beep");
const readerEl = document.getElementById("reader");

let lastScannedText = "";
let lastScannedTime = 0;
const dedupCooldown = 2500; // 2.5s ch·ªëng qu√©t tr√πng

let html5QrCode;
let isCooldown = false;
let queue = [];
let isSending = false;

// ‚úÖ L·∫•y t√™n s·ª± ki·ªán t·ª´ query string
const urlParams = new URLSearchParams(window.location.search);
const suKien = urlParams.get("event") || "Default";

function onScanSuccess(decodedText) {
  const now = Date.now();

  // ‚õî B·ªè qua n·∫øu m√£ tr√πng trong th·ªùi gian ng·∫Øn
  if (decodedText === lastScannedText && (now - lastScannedTime < dedupCooldown)) {
    console.log("‚õî Tr√πng m√£, b·ªè qua:", decodedText);
    return;
  }

  lastScannedText = decodedText;
  lastScannedTime = now;

  if (isCooldown) return;

  isCooldown = true;
  setTimeout(() => { isCooldown = false; }, 1000);

  // üîä B√≠p + hi·ªáu ·ª©ng
  beepSound.play();
  readerEl.classList.add("qr-highlight");
  setTimeout(() => readerEl.classList.remove("qr-highlight"), 800);

  // üìå Hi·ªÉn th·ªã m√£ QR
  document.getElementById("qrText").innerText = decodedText;
  document.getElementById("status").innerText = "üì§ ƒêang g·ª≠i d·ªØ li·ªáu...";

  // üß† ƒê∆∞a v√†o h√†ng ƒë·ª£i
  queue.push(decodedText);
  saveQueue();
  processQueue();
}

function saveQueue() {
  localStorage.setItem("qrQueue", JSON.stringify(queue));
}

function processQueue() {
  if (isSending || queue.length === 0) return;

  isSending = true;
  const data = queue[0];

  fetch(sheetURL, {
    method: "POST",
    body: new URLSearchParams({
      data: data,
      suKien: suKien   // ‚úÖ g·ª≠i th√™m t√™n s·ª± ki·ªán
    })
  })
    .then((res) => res.text())
    .then((result) => {
      document.getElementById("status").innerText = "‚úÖ ƒê√£ g·ª≠i: " + data;
      queue.shift();
      saveQueue();
      isSending = false;
      processQueue(); // ti·∫øp t·ª•c g·ª≠i n·∫øu c√≤n
    })
    .catch((err) => {
      console.error("‚ùå L·ªói g·ª≠i:", err);
      document.getElementById("status").innerText = "‚ùå G·ª≠i l·ªói, s·∫Ω th·ª≠ l·∫°i...";
      isSending = false;
      setTimeout(processQueue, 2000); // th·ª≠ l·∫°i sau 2s
    });
}

function startScanner() {
  document.getElementById("reader").style.display = "block";
  document.getElementById("startBtn").style.display = "none";
  document.getElementById("stopBtn").style.display = "inline-block";

  html5QrCode = new Html5Qrcode(qrCodeRegionId);
  html5QrCode.start(
    { facingMode: "environment" },
    {
      fps: 20,
      qrbox: function (viewfinderWidth, viewfinderHeight) {
        const minEdge = Math.min(viewfinderWidth, viewfinderHeight);
        const size = minEdge * 0.75;
        return { width: size, height: size };
      }
    },
    onScanSuccess
  );
}

function stopScanner() {
  html5QrCode.stop().then(() => {
    document.getElementById("reader").style.display = "none";
    document.getElementById("startBtn").style.display = "inline-block";
    document.getElementById("stopBtn").style.display = "none";
  }).catch(err => {
    console.error("L·ªói khi d·ª´ng camera:", err);
  });
}

// üîÑ Kh√¥i ph·ª•c h√†ng ƒë·ª£i khi t·∫£i l·∫°i trang
window.addEventListener("load", () => {
  try {
    const saved = JSON.parse(localStorage.getItem("qrQueue") || "[]");
    if (saved.length > 0) {
      queue.push(...saved);
      processQueue();
    }
  } catch (e) {
    console.warn("Kh√¥ng th·ªÉ load queue:", e);
  }
});


//-------------- h√†m v·ªã tr√≠ ch·ªØ g√µ -------------------
// M·∫£ng ch·ª©a c√°c t·ª´ s·∫Ω hi·ªÉn th·ªã lu√¢n phi√™n
const texts = ["STU","Tr∆∞·ªùng ƒê·∫°i H·ªçc C√¥ng Ngh·ªá S√†i G√≤n"];

let textIndex = 0; // V·ªã tr√≠ c·ªßa t·ª´ hi·ªán t·∫°i trong m·∫£ng texts
let charIndex = 0; // V·ªã tr√≠ k√Ω t·ª± hi·ªán t·∫°i trong t·ª´
let isDeleting = false; // Bi·∫øn ki·ªÉm tra tr·∫°ng th√°i x√≥a ch·ªØ (true: ƒëang x√≥a, false: ƒëang g√µ)

// H√†m hi·ªáu ·ª©ng g√µ ch·ªØ
function typeEffect() {
    const typingElement = document.getElementById("typing"); // L·∫•y ph·∫ßn t·ª≠ c√≥ ID "typing"
    const currentText = texts[textIndex]; // L·∫•y t·ª´ hi·ªán t·∫°i trong m·∫£ng texts

    if (isDeleting) {
        charIndex--; // N·∫øu ƒëang x√≥a, gi·∫£m s·ªë k√Ω t·ª± hi·ªÉn th·ªã
    } else {
        charIndex++; // N·∫øu ƒëang g√µ, tƒÉng s·ªë k√Ω t·ª± hi·ªÉn th·ªã
    }

    // Hi·ªÉn th·ªã m·ªôt ph·∫ßn c·ªßa ch·ªØ theo charIndex
    typingElement.innerHTML = currentText.substring(0, charIndex);

    // Ki·ªÉm tra n·∫øu ƒë√£ g√µ xong to√†n b·ªô ch·ªØ
    if (!isDeleting && charIndex === currentText.length) {
        isDeleting = true; // B·∫Øt ƒë·∫ßu chuy·ªÉn sang tr·∫°ng th√°i x√≥a ch·ªØ
        setTimeout(typeEffect, 1500); // Gi·ªØ ch·ªØ trong 1.5 gi√¢y tr∆∞·ªõc khi x√≥a
        return; // D·ª´ng h√†m t·∫°m th·ªùi
    }
    
    // Ki·ªÉm tra n·∫øu ƒë√£ x√≥a h·∫øt ch·ªØ
    else if (isDeleting && charIndex === 0) {
        isDeleting = false; // Quay l·∫°i tr·∫°ng th√°i g√µ ch·ªØ
        textIndex = (textIndex + 1) % texts.length; // Chuy·ªÉn sang t·ª´ ti·∫øp theo
    }

    // ƒêi·ªÅu ch·ªânh t·ªëc ƒë·ªô g√µ/x√≥a ch·ªØ
    let speed = isDeleting ? 50 : 100; // Khi x√≥a nhanh h∆°n khi g√µ
    setTimeout(typeEffect, speed); // G·ªçi l·∫°i h√†m sau kho·∫£ng th·ªùi gian t∆∞∆°ng ·ª©ng
}

// G·ªçi h√†m ƒë·ªÉ b·∫Øt ƒë·∫ßu hi·ªáu ·ª©ng
typeEffect();



document.addEventListener("DOMContentLoaded", function () {
    const timelineItems = document.querySelectorAll(".timeline-item");

    const observer = new IntersectionObserver(entries => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.classList.add("show");
            }
        });
    }, { threshold: 0.5 });

    timelineItems.forEach(item => observer.observe(item));
});



window.addEventListener("DOMContentLoaded", function () {
    // L·∫•y ID s·ª± ki·ªán t·ª´ URL
    const urlParams = new URLSearchParams(window.location.search);
    const eventId = urlParams.get("event");

    const eventTitle = document.getElementById("eventTitle");

    if (eventId) {
      eventTitle.textContent = "üìå B·∫°n ƒëang ƒëi·ªÉm danh cho s·ª± ki·ªán: " + eventId;
    } else {
      eventTitle.textContent = "‚ùå Kh√¥ng t√¨m th·∫•y s·ª± ki·ªán!";
    }
  });



